CSS는 너무 길고 중복/반복되기도 한다.

그걸 개선한 전처리 언어(Preprocessor) SASS가 있다.

CSS에 몇 가지 문법을 추가해서 사용하는 문법이라고 할 수 있다.

SASS에는 조건문, 반복문, 변수, 함수, import, 상속 등의 기능이 존재한다.

이를 이용하여 CSS를 쉽게 처리 가능하다.

1. 설치
1-1. Extensitons 메뉴에서 Live Sass Compilor 검색 후 5 버전 이상 설치한다.(보라색 눈동자)

1-2. Sass 파일 생성
    e.g. test.sass
    
    css파일과 똑같이 쓸 수 있지만, 브라우저는 sass파일은 읽지 못한다.
    브라우저는 html, js, css 뿐이다. 따라서 scss파일을 css파일로 변환해 주어야 한다.
    변환할 때 아까 설치한 컴파일러를 사용하면 된다.
    .sass파일에 sass를 작성하면 vscode아래에 watch sass 눈 모양 아이콘(컴파일러)을 눌러서, 변환한다.



Generated:
d:\personal\react-workspace\appl-html\HTML2\test.css.map
d:\personal\react-workspace\appl-html\HTML2\test.css
--------------------
Watching...
--------------------

이런 과정을 거치면 

test.scss가 존재하는 디렉토리에 test.css.map과 test.css 파일이 생성된다.
이 test.css 파일을 html 파일에 넣어주면 된다.
즉, .scss파일에 작성하고, 실제로는 생성된 .css 파일을 첨부하면 된다.

.map 파일은 크롬 개발자도구 디버깅용이다. 크롬 개발자 도구로 디버깅을 할 때,
test.css보다는 test.sass를 분석하고 싶은데, 자연적으로는 할 수 없으므로 .map 파일을 통해
.sass 파일을 분석하는 것이다.


장점1.어려운 단어를 기억해야 할 때 변수를 쓸 수 있다.
    또, 규칙적인 스타일 만들 때도 변수가 도움된다.
    사치 연산은 바로 sass에서 "같은 단위" 라면 해준다. %같은 것은 해주지 않는다. 

    // $변수명: 데이터;
    $main-color: #2a4cb2;
    $sub-color: #eeeeee;
    $basic-size: 16px;

    .background {
        background-color: $main-color;
        // font-size: $basic-size - 2px;
        font-size: ($basic-size / 2px);
    }

    .box {
        color: $main-color;
        font-size: $basic-size + 2px;
    }

    test.css에는 정상적으로 값이 들어간다.

    물론 기본 css에서도 아래와 같이 변수 문법을 사용할 수 있다.

    :root {
        --main-color: red;
    }

    .background {
        background-color: var(--main-color);
        font-size: calc(40px - 20px); //사칙연산 가능
        width: calc(40% - 20px); //이런 것도 가능
    }

    그렇지만 복잡하므로 SASS가 편하다.
    
