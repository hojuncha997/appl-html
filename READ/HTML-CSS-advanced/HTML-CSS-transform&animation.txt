일반적인 애니메이션은 transition을 부여하면 된다. 그러나 좀 단조롭다.

만약 a -> b -> c -> a -> (1초 정지) 등의 복잡한 애니메이션은 @keyframes 문법을 사용하면 좋다.

그 전에 transform이라는 속성을 알아야 한다.



    <!-- transform 애니메이션 -->
    <h4 class="ani-text">안녕하세요.</h4>



/* transform 애니메이션 */
.ani-text {

    /* transform: rotate(-10deg); 회전 */
    /* transform: translateX(300px); x축으로 이동. margin-left와 같지만 좀 더 부드러운 효과가 가능하다 */
    /* transform: translateY(30px);y축으로 이동. */
    /* transform: scale(0.5);    크기 변화 */
    text-align: center;
}

.ani-text:hover {
    animation-name: left-right;
    animation-duration: 1s;
    /* animation-delay: 딜레이의 양;
    animation-iteration-count: 몇 번 반복?;
    animation-timing-function:  베지어:처음에 빨리 혹은 나중에 빨리. 역방향; */

}

/* 복잡한 애니메이션 정의는 keyframes 사용. 애니메이션 임의의 진행도에 따라
css 상태를 설정할 수 있다. 중복 선언도 가능*/
@keyframes left-right {
    0% {
        /* 처음엔 제자리 */
        transform: translateX(0px);
    }

    50% {
        /* 중간엔 왼쪽으로 100px */
        transform: translateX(-100px);
    }

    75% {
        /* 다시 돌아온 다음 오른쪽으로 100px */
        transform: translateX(100px);
    }

    100% {
        /* 다시 원점으로 */
        transform: translateX(0px);
    }
}

----- 이제 글자 위에 포인터를 대면 외쪽으로 갔다가 오른쪽으로 이동한 뒤에 원점회귀한다.


transform을 사용하면 성능 향상을 기대할 수 있다.
애니메이션은 잘못 만들면 사이트가 느려지거나 버벅인다.

50% {
        /* 이렇게 마진으로도 가능하다. 그러나 동작 속도(변경)가 느리다*/
        margin-left: -100px;
}

페이지에 HTML 또는 JS코드가 너무 길거나 컴퓨터가 저사양이라면 transform이 더 빨리 동작한다.


브라우전느 HTML, CSS를 그래픽으로 바꿔주는 프로그램이다.
그런데 이 변경과정에 순서가 있다.
네 단계 정도가 있다.

1. Render Tree 만들기
: 우선 css를 읽고 렌더 트리를 만든다.

2. Layout을 잡는다.
:렌더 트리를 참고하여 레이아웃을 잡는다. 네모 박스의 위치를 잡는 것이다.
width, height, margin, padding 등을 처리한다.

3. Paint 한다.
: div들을 색칠한다. 픽셀 하나하나의 색을 변경해주는 것이다.
color, background-color 등의 속성을 적용한다.

4. Composite 처리한다.
:composite단계의 css를 처리한다. transform, opacity등 부차적인 속성들을 적용한다.


---

만약 width(또는 margin, padding 등)를 변경한다고 하면 
레이아웃을 변경하고, 페인트도 다시하고 컴포짓 처리도 다시 해야 하는 것이다.
컬러를 바꿨다면, 페인트, 컴포짓을 다시 처리해야 한다.

그런데 만약 컴포짓 단계의 속성을 만졌다면(e.g. transform 등) 컴포짓 단계만 다시 하면 된다.
즉 부담이 덜하다는 것이다.

따라서 margin 등을 이동하기보다는 transform을 사용하여 단계를 줄임으로써 
퍼포먼스를 향상시킬 수 있다는 것이다.
특히 JS가 너무 많은 사이트는 그렇다.

더불어 transform과 같은 composite 단계의 속성들은 다른 쓰레드에서 처리해준다.
원래 웹브라우저는 쓰레드를 1개만 사용한다.
  -JS 실행, HTML CSS 처리를 전부 한곳에서 하는 것이다.

transform과 같은 composite 단계의 속성들은 다른 쓰레드에서 처리하므로 빠르다.

이 외에도 성능 개선에는 

will-change, 3D animation을 사용하여 애니메이션 성능을 잡을 수 있다.



-----


transform 관련 CSS 속성들 

 

.box {
  transform : rotate(10deg); 
  transform : translate(10px, 20px);
  transform : scale(2);
  transform : skew(30deg);
  
  /*transform 두개 이상을 한꺼번에 쓰려면*/
  transform : rotate(10deg) translateX(30px);
}
transform 은 어떤 요소를 독립적으로 움직이게 만들고 싶을 때 사용합니다.

본인 원래 위치에서 자유롭게 (다른 요소에 영향 없이) 이동하게 됩니다.

rotate는 회전, translate는 좌표이동, scale은 확대축소, skew는 비틀기 입니다. 

특히 애니메이션을 동작시킬 때 transform 속성을 쓰면 효과적인데 이유는 강의에서 설명합니다. 

 

 

 

 

복잡한 애니메이션 구현법

 

예전 간단한 a -> b 애니메이션들은 

시작스타일, 최종스타일, 트리거, transition 주면 된다고 했습니다. 

근데 a -> b -> a,  a -> 1초정지 -> b 같은 복잡한건 못합니다.

@keyframes를 쓰면 가능합니다. 

 

 

1. 가장 먼저 @keyframes 를 정의합니다. 

 

@keyframes 움찔움찔{
  0% {
    transform : translateX(0px); /* 애니메이션이 0%만큼 동작시 */
  }
  50% {
    transform : translateX(-20px); /* 애니메이션이 50%만큼 동작시 */
  }
  100% {
    transform : translateX(20px); /* 애니메이션이 100%만큼 동작시 */
  }
}
@keyframes는 커스텀 애니메이션을 정의하기 위한 공간이라고 생각하시면 됩니다.

'움찔움찔'이라는 애니메이션을

0% 진행했을 때의 CSS,

50% 진행했을 때의 CSS,

100% 진행했을 때의 CSS를 각각 작성합니다.

(% 수치는 맘대로 변경, 추가 가능합니다)

 

 

 

2. keyframes를 원하는 곳에 첨부합니다. 

 

.box:hover {
  animation-name : 움찔움찔;
  animation-duration : 1s;
}
animation 속성을 이용하시면 애니메이션을 동작시킬 수 있습니다 .

꼭 필요한 속성은 name과 duration이고

애니메이션 이름을 name에

애니메이션 동작시간을 duration에 넣으면 됩니다.

그럼 진짜 마우스 올렸을 때 움찔움찔 애니메이션이 동작합니다. 

 

 

 

 

3. 애니메이션 세부조정하기

 

.box:hover {
  animation-name : 움찔움찔;
  animation-duration : 1s;
  animation-timing-function : linear; /*베지어 주기*/
  animation-delay : 1s; /*시작 전 딜레이*/
  animation-iteration-count : 3; /*몇회 반복할것인가*/
  animation-play-state : paused;  /*애니메이션을 멈추고 싶은 경우 자바스크립트로 이거 조정*/
  animation-fill-mode: forwards;  /*애니메이션 끝난 후에 원상복구 하지말고 정지*/
}
위의 속성을 쓰시면 애니메이션 동작시 세부사항을 더 자세하게 조정하실 수 있습니다. 

이제 위에 있는 숙제를 하러가도록 합시다. 

 

 

 

 

 

 

margin, width, left, 이런거 말고 transform 쓰라는 이유 

 

크롬같은 웹브라우저들은 html css를 2D 그래픽으로 바꿔주는 간단한 프로그램입니다.

근데 html css를 그래픽으로 바꿀 때

layout 잡기 -> 색칠하기 -> transform 적용하기 순서로 동작합니다.  

layout이 바뀌면 layout 부터 transform 까지 쭉 다시 렌더링해야하는데

transform이 바뀌면 transform 부분만 다시 렌더링하면 됩니다. 

그래서 뭔가 이동시키고 싶으면 margin 쓰는 것 보다 transform 쓰는게 빠르게 동작합니다.

 

 

 

 

 

성능 잡을 수 있는 여러 방법1. will-change 쓰면 됩니다.

 

.box {
  will-change: transform;
} 
애니메이션을 주는 .box가 약간 느리게 동작한다면 

will-change : 애니메이션줄속성;

이걸 써놓으면 성능개선이 가능합니다. 바뀔 내용을 미리 렌더링해주는 속성이라 그렇습니다.

뭔가 이상하게 버벅일 때만 쓰시고 애니메이션이 스무스하게 잘 된다면 쓸 이유는 없습니다.

이상하게 많이 쓰면 브라우저 자체가 더 느려질 수 있습니다.

https://dev.opera.com/articles/ko/css-will-change-property/

 

 

 

 

성능 잡을 수 있는 여러 방법2. 하드웨어 가속

 

애니메이션이 너무 많아 CPU만으로 전부 연산이 불가능하다면

GPU의 도움을 받을 수도 있습니다.

 

.box {
  transform: translate3d(0, 0, 0);
}
transform : translate3d를 쓰면 3D 이동도 가능한데

이 속성의 경우 GPU를 사용해서 연산하게 됩니다.

그래서 translate3d(0, 0, 0) 이런 식으로 아무데도 움직이지 않는 3D 이동명령을 주고

뒤에 필요한 transform을 더 적용한다면 

GPU를 이용해서 .box가 가진 transform 속성들을 연산할 수 있습니다. 

부담을 덜고싶을 때 사용하면 됩니다. 

 

 

 











